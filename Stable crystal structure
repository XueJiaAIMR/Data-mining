from pymatgen.ext.matproj import MPRester
import numpy as np
import pandas as pd
m = MPRester("")
from pymatgen import MPRester
import time
from pymatgen.analysis.pourbaix_diagram import PourbaixDiagram,ELEMENTS_HO, PourbaixPlotter
data = []
for i in range(2,6):
    criteria={"elements":{"$in": ["O"],
                            "$nin": ["Ac","Th","Pa","U","Np","Pu","Am","Cm","Bk","Cf","Es","Fm","Md","No","Lr","As".
                              "Pm","Rf","Db","Sg","Tc","Bh","Hs","Mt","Ds","Rg","Cn","Nh","Fl","Mc","Lv","Ts","Og","Po",
                                   "At","Rn","F","Cl","Br","I","At","B","C","N","H","He","Ne","Ar","Kr","Xe","Tc"."P"]},
                 'nelements':i}
    

    properties = ["material_id","nelements","nsites","icsd_ids","pretty_formula","formula","energy","energy_per_atom","spacegroup.symbol",
              "spacegroup.number","spacegroup.point_group","spacegroup.crystal_system","band_gap","structure.lattice.a","density","cif",
              "structure.lattice.b","structure.lattice.c","volume","efermi","formation_energy_per_atom",
              "e_above_hull",'has']
    data1 = m.query(criteria, properties)
    data1 = np.array(data1) 
    data.extend(data1)
    
data_pd = pd.DataFrame(data)
    
data_Ehull_pd = data_pd
formation_energy = []
data_success = []
data_error = []

for m_id in range(0,len(data_Ehull_pd)):#len(data_pd)
    print(m_id)
    data_m_id = data_Ehull_pd.iloc[m_id]
    material_id = data_m_id['material_id']
    try:
        doc = mpr.thermo.get_data_by_id(material_id)
        E_for_ene = doc.formation_energy_per_atom
        formation_energy.append(E_for_ene)
        data_success.append(data_m_id)
    except:
        data_error.append(data_m_id)  
pd.DataFrame(data_success).to_excel('D:\\筛选材料\\氧化物\\PH=0\\Eforn_updata_6325.xlsx',index=None)
pd.DataFrame(formation_energy).to_excel('D:\\筛选材料\\氧化物\\PH=0\\formation_energy_6325.xlsx',index=None)

data_foration_pd = pd.read_excel('D:\\筛选材料\\氧化物\\PH=0\\\Eform_6325_done.xlsx',header = 0) #提取数据
data_foration_pd.head()
from matminer.featurizers.conversions import StrToComposition
data_pd_str = StrToComposition().featurize_dataframe(data_foration_pd, "pretty_formula",ignore_errors=True)
ele = []
compound_pd = data_pd_str['composition']
compound_np = np.array(compound_pd)
for i in range(0,len(compound_np)):
    print(i)
    compound_i = compound_np[i]
    compound_i_list = list(compound_i)
    elements = []
    ele_num  = len(compound_i_list)
    for j in range(ele_num):
        #element_list = compound_i_list[j]
        element_j = str(compound_i_list[j])
        elements.append(element_j)
    ele.append(elements)
    
duplicate_all = []
duplicate_stable = []
for i in range(0,len(ele)):
    print(i)
    if i in duplicate_all:
        a=1
    else:
        duplicate_i = []
        com_1 = ele[i]
        for j in range(i+1, len(ele)):
            com_2 = ele[j]
            if com_1 == com_2:
                duplicate_i.append(i)
                duplicate_i.append(j)
            else:
                j = j+1
        
        duplicate_all.extend(duplicate_i)

        if duplicate_i == None:
            print(stable)
        else:
            formation_i = data_foration_pd.iloc[duplicate_i]
            formation_same = formation_i['formation_energy_per_atom']
            for_argmax = formation_same[formation_same == formation_same.min()].index
            duplicate_stable.extend(for_argmax)
            
stable_ubstable_all = data_foration_pd.iloc[duplicate_all]
df_without_duplicates = stable_ubstable_all.drop_duplicates()
stable = data_foration_pd.iloc[duplicate_stable]
diff=pd.concat([df_without_duplicates,stable,stable]).drop_duplicates(keep=False)
crystal_structure = pd.concat([data_foration_pd,diff,diff]).drop_duplicates(keep=False)
